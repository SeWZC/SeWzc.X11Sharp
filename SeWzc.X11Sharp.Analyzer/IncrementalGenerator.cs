using Microsoft.CodeAnalysis;

namespace SeWzc.X11Sharp.Analyzer;

[Generator(LanguageNames.CSharp)]
public class IncrementalGenerator : IIncrementalGenerator
{
    /// <inheritdoc />
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterSourceOutput(context.CompilationProvider,
            static (context, _) =>
            {
                context.AddSource("X11DisplayXidUsings.g.cs", $$"""
                    global using X11DisplayAtom = SeWzc.X11Sharp.X11DisplayXid<SeWzc.X11Sharp.X11Atom>;
                    global using X11DisplayColormap = SeWzc.X11Sharp.X11DisplayXid<SeWzc.X11Sharp.X11Colormap>;
                    global using X11DisplayCursor = SeWzc.X11Sharp.X11DisplayXid<SeWzc.X11Sharp.X11Cursor>;
                    global using X11DisplayDrawable = SeWzc.X11Sharp.X11DisplayXid<SeWzc.X11Sharp.X11Drawable>;
                    global using X11DisplayFont = SeWzc.X11Sharp.X11DisplayXid<SeWzc.X11Sharp.X11Font>;
                    global using X11DisplayGContext = SeWzc.X11Sharp.X11DisplayXid<SeWzc.X11Sharp.X11GContext>;
                    global using X11DisplayPixmap = SeWzc.X11Sharp.X11DisplayXid<SeWzc.X11Sharp.X11Pixmap>;
                    global using X11DisplayWindow = SeWzc.X11Sharp.X11DisplayXid<SeWzc.X11Sharp.X11Window>;
                    """);
            });

//         context.RegisterSourceOutput(xids,
//             static (context, source) =>
//             {
//                 // 获取类型名称和类型声明语法节点
//                 var (typeDeclaration, namespaceName) = source;
//
//                 var keyword = typeDeclaration.Keyword.ToString();
//                 if (typeDeclaration is RecordDeclarationSyntax recordDeclaration)
//                 {
//                     // 处理记录类型
//                     keyword += " " + recordDeclaration.ClassOrStructKeyword;
//                 }
//
//                 // 生成源代码
//                 var sourceCode = $$"""
//                     // <auto-generated/>
//                     using SeWzc.X11Sharp.Structs;
//
//                     namespace {{namespaceName}};
//
//                     partial {{keyword}} {{typeDeclaration.Identifier}}
//                     {
//                         #region 运算符重载
//
//                     // 强制转换不需要文档
//                     #pragma warning disable CS1591
//
//                         public static implicit operator ULong({{typeDeclaration.Identifier}} value)
//                         {
//                             return value.Id;
//                         }
//
//                         public static implicit operator nuint({{typeDeclaration.Identifier}} value)
//                         {
//                             return value.Id;
//                         }
//
//                         public static implicit operator nint({{typeDeclaration.Identifier}} value)
//                         {
//                             return (nint)value.Id;
//                         }
//
//                         public static implicit operator int({{typeDeclaration.Identifier}} value)
//                         {
//                             return value.ToInt32();
//                         }
//
//                         public static implicit operator uint({{typeDeclaration.Identifier}} value)
//                         {
//                             return value.ToUInt32();
//                         }
//
//                     #pragma warning restore CS1591
//
//                         #endregion
//                     }
//                     """;
//
//                 context.AddSource($"{typeDeclaration.Identifier.ValueText}.g.cs", sourceCode);
//             });
    }
}
