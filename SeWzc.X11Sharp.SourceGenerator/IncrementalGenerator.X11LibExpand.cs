using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace SeWzc.X11Sharp.SourceGenerator;

public partial class IncrementalGenerator
{
    private static HashSet<string> TypeSuffixes { get; } =
        ["Atom", "Colormap", "Cursor", "Drawable", "Font", "GContext", "Pixmap", "Window", "GC"];

    private static HashSet<string> X11DisplayWithTypes { get; } =
        [..TypeSuffixes.Select(type => "X11Display" + type)];

    private static Dictionary<string, string> X11TypeToCamelCase { get; } =
        TypeSuffixes.ToDictionary(type => "X11" + type, type => char.ToLowerInvariant(type[0]) + type[1..]);

    private static Dictionary<string, string> X11DisplayWithTypeToX11Type { get; } =
        TypeSuffixes.ToDictionary(type => "X11Display" + type, type => "X11" + type);

    private static void GenerateX11LibExpand(IncrementalGeneratorInitializationContext context)
    {
        var incrementalValuesProvider = context.SyntaxProvider.CreateSyntaxProvider(static (node, _) =>
            {
                if (node is not MethodDeclarationSyntax { Parent: TypeDeclarationSyntax { Identifier.ValueText: "X11Lib" } } methodDeclaration)
                    return false;

                var parameters = methodDeclaration.ParameterList.Parameters;
                return parameters.Count > 0 && IsX11DisplayXidType(parameters[0]) && parameters.Skip(1).All(p => !IsX11DisplayXidType(p));

                bool IsX11DisplayXidType(ParameterSyntax parameterSyntax)
                {
                    return parameterSyntax.Type is IdentifierNameSyntax { Identifier.ValueText: { } typeName }
                           && X11DisplayWithTypes.Contains(typeName);
                }
            },
            static (context, _) =>
            {
                // 获取方法声明语法节点
                var methodDeclaration = (MethodDeclarationSyntax)context.Node;

                return new X11LibMethodInfo
                {
                    MethodName = methodDeclaration.Identifier.ValueText,
                    ReturnType = methodDeclaration.ReturnType.ToString(),
                    ParameterType = ((IdentifierNameSyntax)methodDeclaration.ParameterList.Parameters[0].Type!).Identifier.ValueText,
                    OtherParameters = methodDeclaration.ParameterList.Parameters.Skip(1).Select(x => new X11LibParameterInfo
                    {
                        Modifier = x.Modifiers.ToString(),
                        TypeName = x.Type?.ToString() ?? throw new InvalidOperationException(),
                        ParameterName = x.Identifier.ValueText,
                    }).ToList(),
                };
            });

        context.RegisterSourceOutput(incrementalValuesProvider.Collect(),
            static (context, source) =>
            {
                var sourceBuilder = new StringBuilder();

                sourceBuilder.Append("""
                    // <auto-generated/>
                    using SeWzc.X11Sharp.Structs;

                    namespace SeWzc.X11Sharp;

                    #nullable enable

                    partial class X11Lib
                    {

                    """);

                foreach (var info in source)
                {
                    // 生成方法的源代码
                    var x11DisplayWithType = info.ParameterType;
                    var x11Type = X11DisplayWithTypeToX11Type[x11DisplayWithType];
                    var name = X11TypeToCamelCase[x11Type];
                    var parameters = string.Join(", ",
                        ((IEnumerable<string>) ["this X11Display display", $"{x11Type} {name}"])
                        .Concat(info.OtherParameters.Select(x => x.ToParameterString())));
                    var returnString = info.ReturnType == "void" ? string.Empty : "return ";
                    var methodSourceCode = $$"""
                            /// <see cref="{{info.MethodName}}({{string.Join(", ", info.OtherParameters.Select(p => p.ToXmlString()).Prepend(x11DisplayWithType))}})"/>
                            public static {{info.ReturnType}} {{info.MethodName}}({{parameters}})
                            {
                                {{returnString}}{{info.MethodName}}({{string.Join(", ", info.OtherParameters.Select(p => p.ToArgumentString()).Prepend($"{name}.WithDisplay(display)"))}});
                            }


                        """;

                    sourceBuilder.Append(methodSourceCode);
                }

                sourceBuilder.AppendLine("}");

                context.AddSource("X11Lib.Expand.g.cs", sourceBuilder.ToString());
            });
    }

    private record X11LibMethodInfo
    {
        public required string MethodName { get; init; }
        public required string ReturnType { get; init; }
        public required string ParameterType { get; init; }
        public required IReadOnlyList<X11LibParameterInfo> OtherParameters { get; init; }
    }

    private record X11LibParameterInfo
    {
        /// <summary>
        /// 可选的修饰符，如 "ref" 或 "out"。
        /// </summary>
        public string Modifier { get; init; } = string.Empty;

        public required string TypeName { get; init; }
        public required string ParameterName { get; init; }

        public string ToParameterString()
        {
            return $"{Modifier} {TypeName} {ParameterName}".Trim();
        }

        public string ToArgumentString()
        {
            return $"{Modifier} {ParameterName}".Trim();
        }

        public string ToXmlString()
        {
            return $"{Modifier} {TypeName}".Trim();
        }
    }
}
